--- /media/EXPAND/lin/frameworks/av/media/libstagefright/ACodec.cpp     2019-05-05 18:07:32.943515574 +0200
+++ /usr/src/android/lin/frameworks/av/media/libstagefright/ACodec.cpp  2019-09-27 19:01:59.728918331 +0200
@@ -62,6 +62,12 @@
 #include "include/SharedMemoryBuffer.h"
 #include <media/stagefright/omx/OMXUtils.h>
 
+#ifndef MTK_HARDWARE
+#define MTK_HARDWARE
+#endif
+
+#define USE_LEGACY_RESCALING 1
+
 namespace android {
 
 using binder::Status;
@@ -3190,7 +3196,12 @@
                 || format.eColorFormat == OMX_COLOR_FormatYUV420PackedPlanar
                 || format.eColorFormat == OMX_COLOR_FormatYUV420SemiPlanar
                 || format.eColorFormat == OMX_COLOR_FormatYUV420PackedSemiPlanar
-                || format.eColorFormat == OMX_TI_COLOR_FormatYUV420PackedSemiPlanar) {
+                || format.eColorFormat == OMX_TI_COLOR_FormatYUV420PackedSemiPlanar
+#ifdef MTK_HARDWARE
+                               || format.eColorFormat == HAL_PIXEL_FORMAT_YV12
+                               || format.eColorFormat == OMX_MTK_COLOR_FormatYV12
+#endif                
+                ) {
             break;
         }
         // find best legacy non-standard format
@@ -4795,6 +4806,8 @@
                     notify->setInt32("slice-height", videoDef->nSliceHeight);
                     notify->setInt32("color-format", videoDef->eColorFormat);
 
+
+
                     if (mNativeWindow == NULL) {
                         DescribeColorFormat2Params describeParams;
                         InitOMXParams(&describeParams);
@@ -4845,6 +4858,7 @@
                             rect.nTop < 0 ||
                             rect.nLeft + rect.nWidth > videoDef->nFrameWidth ||
                             rect.nTop + rect.nHeight > videoDef->nFrameHeight) {
+
                             ALOGE("Wrong cropped rect (%d, %d, %u, %u) vs. frame (%u, %u)",
                                     rect.nLeft, rect.nTop,
                                     rect.nWidth, rect.nHeight,
@@ -7888,6 +7902,14 @@
                     return false;
                 }
 
+#ifdef USE_LEGACY_RESCALING
+                // Resolution is about to change
+                // Make sure the decoder knows
+                sp<AMessage> reply = new AMessage(kWhatOutputBufferDrained, mCodec);
+                mCodec->onOutputFormatChanged();
+                mCodec->addKeyFormatChangesToRenderBufferNotification(reply);
+                mCodec->sendFormatChange();
+#endif
                 ALOGV("[%s] Output port now reenabled.", mCodec->mComponentName.c_str());
 
                 if (mCodec->mExecutingState->active()) {
@@ -7901,7 +7923,14 @@
 
             return false;
         }
-
+#ifdef USE_LEGACY_RESCALING
+        case OMX_EventPortSettingsChanged:
+            // Exynos OMX wants to share its' output crop
+            // For some reason trying to handle this here doesn't do anything
+            // We'll do it right before transitioning to ExecutingState
+            return true;
+        break;
+#endif
         default:
             return BaseState::onOMXEvent(event, data1, data2);
     }
@@ -8463,6 +8492,27 @@
     return OK;
 }
 
+#ifdef USE_LEGACY_RESCALING
+void ACodec::addKeyFormatChangesToRenderBufferNotification(sp<AMessage> &notify) {
+    AString mime;
+    CHECK(mOutputFormat->findString("mime", &mime));
+    if (mime == MEDIA_MIMETYPE_VIDEO_RAW && mNativeWindow != NULL) {
+        // notify renderer of the crop change and dataspace change
+        // NOTE: native window uses extended right-bottom coordinate
+        int32_t left, top, right, bottom;
+        if (mOutputFormat->findRect("crop", &left, &top, &right, &bottom)) {
+            notify->setRect("crop", left, top, right + 1, bottom + 1);
+        }
+        int32_t dataSpace;
+        if (mOutputFormat->findInt32("android._dataspace", &dataSpace)) {
+            notify->setInt32("dataspace", dataSpace);
+        }
+    }
+}
+
+
+#endif
+
 void ACodec::setTrebleFlag(bool trebleFlag) {
     mTrebleFlag = trebleFlag;
 }


